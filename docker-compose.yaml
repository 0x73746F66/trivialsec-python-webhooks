version: '3.6'
x-defaults: &defaults
  env_file: .env
  restart: unless-stopped
  logging:
    options:
      max-size: "10m"
      max-file: "3"

services:
  python-base:
    env_file: .env
    image: trivialsec/python-base
    build:
      context: ./common/docker/python
      dockerfile: Dockerfile

  node-base:
    env_file: .env
    image: trivialsec/node-base
    build:
      context: ./common/docker/node
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
        NODE_PATH: ${NODE_PATH}

  gitlab-runner:
    <<: *defaults
    env_file: .noop
    image: trivialsec/gitlab-runner
    container_name: gitlab-runner
    build:
      context: ./common/docker/gitlab-runner
      dockerfile: Dockerfile
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - gitlab-runner-config:/etc/gitlab-runner:rw

  web:
    <<: *defaults
    image: trivialsec/web
    container_name: web
    build:
      context: ./web
      dockerfile: docker/Dockerfile
      args:
        COMMON_VERSION: ${COMMON_VERSION}
    environment:
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    entrypoint: python3.8
    command: ["-u", "-d", "-X", "dev", "run.py"]
    ports:
      - 5000:5000
      - 80:80
    volumes:
      - ./web/src/actions:/srv/app/actions
      - ./web/src/app:/srv/app/app
      - ./web/src/routes:/srv/app/routes
      - ./web/src/static:/srv/app/static
      - ./web/src/templates:/srv/app/templates
    depends_on:
      - mysql
      - sockets
      - redis
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - NET_BIND_SERVICE
    networks:
      trivialsec:
        aliases:
          - web
    healthcheck:
      test: curl -f http://localhost:5000 || exit 1
      timeout: 20s
      retries: 10

  sockets:
    <<: *defaults
    image: trivialsec/sockets
    container_name: sockets
    build:
      context: ./sockets
      dockerfile: docker/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
        NODE_PATH: ${NODE_PATH}
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - PORT=5080
      - CONFIG_FILE=src/${CONFIG_FILE}
    ports:
      - 5080:5080
    expose:
      - 2812
      - 5080
    volumes:
      - ./sockets/src:/srv/app/src
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
    networks:
      trivialsec:
        aliases:
          - sockets
  
  mysql:
    <<: *defaults
    image: mysql:8
    container_name: mysql
    volumes:
      - ./mysql_datadir:/var/lib/mysql
      - ./sql:/tmp/sql
    ports:
      - 3306:3306
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    security_opt:
      - seccomp:"./common/docker/seccomp-mysql.json"
    networks:
      trivialsec:
        aliases:
          - mysql
    healthcheck:
      test: mysqladmin ping -h mysql
      timeout: 20s
      retries: 10

  redis:
    <<: *defaults
    image: redis:5.0@sha256:e73ef998c22f9a98793d9951bb2915cd945d8fa6f9ec1b324e85d19617efc2fd
    container_name: redis
    expose:
      - 6379
    volumes:
      - ./redis_datadir:/data
    networks:
      trivialsec:
        aliases:
          - redis

  workers:
    <<: *defaults
    image: trivialsec/workers
    # entrypoint: "bash -c 'tail -f /dev/null'"
    build:
      context: ./workers
      dockerfile: docker/Dockerfile
      args:
        COMMON_VERSION: ${COMMON_VERSION}
    depends_on:
      - mysql
      - sockets
    environment:
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      trivialsec:
        aliases:
          - workers
    volumes:
      - ./workers/src:/srv/app/src
      - ./workers/bin:/srv/app/lib/bin
      - ./workers/src/amass:/srv/app/amass
      - ./workers/src/drill:/srv/app/drill
      - ./workers/src/nmap:/srv/app/nmap
      - ./workers/src/testssl:/srv/app/testssl
      - ./workers/src/metadata:/srv/app/metadata
      - ./workers/src/worker:/srv/app/worker
      - ./workers/src/main.py:/srv/app/main.py

  # worker-nikto2:
  #   <<: *defaults
  #   image: trivialsec/trivialsec/worker-nikto2
  #   build:
  #     context: ./workers
  #     dockerfile: docker/nikto2/Dockerfile
  #     args:
  #       VERSION: 2.1.6
  #   entrypoint: "bash -c 'tail -f /dev/null'"
  #   expose:
  #     - 2812
  #   depends_on:
  #     - mysql
  #     - sockets
  #   environment:
  #     - LOG_LEVEL=${LOG_LEVEL}
  #     - CONFIG_FILE=${CONFIG_FILE}
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  mongo:
    <<: *defaults
    image: mongo:4.0@sha256:f0397f249d2ced55ce59c7c50a8490ea536ffe4af4db75801f3443a380b7070a
    container_name: mongo
    ports:
      - 27017:27017
    expose:
      - 27017
    volumes:
      - ./mongo_datadir:/data/db
    networks:
      trivialsec:
        aliases:
          - mongo

  search:
    <<: *defaults
    image: trivialsec/search
    container_name: search
    build:
      context: ./cve-search
      dockerfile: Dockerfile
      args:
        - RELEASE=2.5
        - CONF_PATH=configuration-dev.ini
    ports:
      - 5180:5180
    expose:
      - 5180
    depends_on:
      - mongo
      - redis
    networks:
      trivialsec:
        aliases:
          - search

  nginx:
    <<: *defaults
    image: nginx
    container_name: nginx
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf
      - ./letsencrypt:/etc/letsencrypt
    ports:
      - 80:80
      - 443:443
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
      - NET_BIND_SERVICE
    networks:
      trivialsec:
         aliases:
          - nginx

  certbot:
    <<: *defaults
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /mnt/volume_sgp1_02/letsencrypt/conf:/etc/letsencrypt
      - /mnt/volume_sgp1_02/letsencrypt/www:/var/www/certbot
    entrypoint: '/bin/sh -c ''trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'''
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    networks:
      trivialsec:
         aliases:
          - certbot

  phonito:
    <<: *defaults
    image: phonito/scanner
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostfs:ro
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - PHONITO_API_TOKEN=${PHONITO_API_TOKEN}
    cap_add:
      - SYS_ADMIN
      - SYS_PTRACE

networks:
  trivialsec:

volumes:
  gitlab-runner-config:
    external: true
    name: gitlab-runner-config